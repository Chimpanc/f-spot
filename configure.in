AC_INIT(F-Spot, 0.4.0)
AC_CONFIG_SRCDIR(src/main.cs)

AM_CONFIG_HEADER(config.h)

AM_INIT_AUTOMAKE([tar-ustar])

AM_MAINTAINER_MODE

AC_PROG_INTLTOOL([0.21])

AC_PROG_CC
AC_ISC_POSIX
AC_HEADER_STDC
AM_PROG_LIBTOOL

GNOME_COMPILE_WARNINGS
AM_PATH_GLIB_2_0

dnl --- Check for mono and gmcs

AC_PATH_PROG(MONO, mono)
AC_PATH_PROG(MCS, gmcs)

CS="C#"
if test ! -x "$MCS"; then
	AC_MSG_ERROR([No $CS compiler found])
fi

dnl -- Initialize docs

GNOME_DOC_INIT

dnl -- Check for mono pc file

AC_MSG_CHECKING([for mono.pc])
if test -z `$PKG_CONFIG --variable=prefix mono`; then
  AC_MSG_ERROR([missing the mono.pc file, usually found in the mono-devel package])
else
  AC_MSG_RESULT([found])
fi

dnl -- check for various mono DLLs that we need.

needed_dlls="Mono.Data.SqliteClient Mono.Posix System.Runtime.Remoting System.Web System.Web.Services Mono.GetOptions"
for i in $needed_dlls; do
  AC_MSG_CHECKING([for $i.dll])
  if test ! \( -e `$PKG_CONFIG --variable=prefix mono`/lib/mono/2.0/$i.dll -o -e `$PKG_CONFIG --variable=prefix mono`/lib64/mono/2.0//$i.dll \); then
    AC_MSG_ERROR([missing required mono 2.0 DLL: $i.dll])
  else
    AC_MSG_RESULT([found])
  fi
done

dnl --- Required libraries

LIBGNOME_REQUIRED=2.2
LIBGNOMEUI_REQUIRED=2.2
LIBEXIF_REQUIRED_MIN=0.5.7
LIBEXIF_REQUIRED_MAX=0.7.0
GTKSHARP_REQUIRED=2.8
MONO_REQUIRED=1.1.7
GTK_REQUIRED=2.6
BEAGLE_REQUIRED=0.3.0
NDESK_DBUS_REQUIRED=0.4.2
NDESK_DBUS_GLIB_REQUIRED=0.3.0

dnl -- this check is 	
LCMS_REQUIRED=1.12
dnl -- LIBGPHOTO2_REQUIRED=2.1.4

PKG_CHECK_MODULES(F, libgnome-2.0 >= $LIBGNOME_REQUIRED libgnomeui-2.0 >= $LIBGNOMEUI_REQUIRED libexif >= $LIBEXIF_REQUIRED_MIN libexif < $LIBEXIF_REQUIRED_MAX gtkhtml-sharp-2.0 >= $GTKSHARP_REQUIRED gconf-sharp-2.0 >= $GTKSHARP_REQUIRED glade-sharp-2.0 >= $GTKSHARP_REQUIRED gnome-vfs-sharp-2.0 >= $GTKSHARP_REQUIRED gtk+-2.0 >= $GTK_REQUIRED mono >= $MONO_REQUIRED)
AC_SUBST(F_CFLAGS)
AC_SUBST(F_LIBS)

CSC_DEFINES=""
if pkg-config --atleast-version=2.10 gtk-sharp-2.0; then
   CSC_DEFINES="-d:GTK_2_10"
fi
if pkg-config --atleast-version=2.18 gconf-sharp-2.0; then
  CSC_DEFINES="$CSC_DEFINES -d:GCONF_SHARP_2_18"
fi
AC_SUBST(CSC_DEFINES)

PKG_CHECK_MODULES(BEAGLE, beagle-0.0 >= $BEAGLE_REQUIRED,
[
	dnl this is a work around to avoid linking against beagles Util.dll
	BEAGLE_DIR=`$PKG_CONFIG --variable=dlldir beagle-0.0`	
	LINK_BEAGLE="-r:$BEAGLE_DIR/Beagle"
	BEAGLE_DEFINES='-d:ENABLE_BEAGLE'
],
[
	AC_MSG_RESULT([beagle not found])
])
AC_SUBST(BEAGLE_DIR)
AC_SUBST(BEAGLE_DEFINES)
AC_SUBST(LINK_BEAGLE)

dnl -- dbus-sharp: link or bundle ?
PKG_CHECK_MODULES(NDESK_DBUS, ndesk-dbus-1.0 >= $NDESK_DBUS_REQUIRED ndesk-dbus-glib-1.0 >= $NDESK_DBUS_GLIB_REQUIRED,
[
	LINK_DBUS="-pkg:ndesk-dbus-1.0 -pkg:ndesk-dbus-glib-1.0"
	DIR_DBUS=""
	DIR_DBUS_GLIB=""
	PATH_DBUS=""
],
[
	LINK_DBUS='-r:$(top_builddir)/dbus-sharp/NDesk.DBus.dll -r:$(top_builddir)/dbus-sharp-glib/NDesk.DBus.GLib.dll'
	DIR_DBUS="dbus-sharp"
	DIR_DBUS_GLIB="dbus-sharp-glib"
	PATH_DBUS='../dbus-sharp:../dbus-sharp-glib:
])
AC_SUBST(DIR_DBUS)
AC_SUBST(DIR_DBUS_GLIB)
AC_SUBST(LINK_DBUS)
AC_SUBST(PATH_DBUS)

dnl -- nunit ... workaround for ubuntu
NUNIT_DEFINES='-d:ENABLE_NUNIT'
PKG_CHECK_MODULES(MONO_NUNIT, mono-nunit >= $MONO_REQUIRED,
[
  NUNIT_LIBS=$MONO_NUNIT_LIBS
  NUNIT_PKG='-pkg:mono-nunit'
],
[
  PKG_CHECK_MODULES(NUNIT22, nunit-2.2 >= $MONO_REQUIRED,
  [
    NUNIT_LIBS=$NUNIT22_LIBS
    NUNIT_PKG='-pkg:nunit-2.2'
  ],
  [
    PKG_CHECK_MODULES(NUNIT, nunit >= $MONO_REQUIRED,
    [
	NUNIT_LIBS=$NUNIT_LIBS
	NUNIT_PKG='-pkg:nunit'
    ],
    [
        NUNIT_DEFINES=''
	NUNIT_PKG=''
    ])
  ])
])

AC_SUBST(NUNIT_PKG)
AC_SUBST(NUNIT_DEFINES)


dnl --- GConf

AC_PATH_PROG(GCONFTOOL, gconftool-2, no)
AM_GCONF_SOURCE_2


dnl --- libjpeg

AC_CHECK_LIB(jpeg, jpeg_start_decompress, [],
	     [AC_MSG_ERROR([libjpeg not found])], -lm)
AC_CHECK_HEADER(jpeglib.h, , [AC_MSG_ERROR([libjpeg not found])])
LIBJPEG='-ljpeg'

dnl --- lcms

PKG_CHECK_MODULES(LCMS, lcms >= $LCMS_REQUIRED, [], 
	[AC_CHECK_LIB(lcms, cmsCreateBCHSWabstractProfile, [],
		     [AC_MSG_ERROR([liblcms not found])], -lm)
	AC_CHECK_HEADER(lcms.h, , [AC_MSG_ERROR([liblcms not found])])
	LCMS_LIBS='-llcms'
	LCMS_CFLAGS=''])


dnl --- libgphoto2-sharp

PKG_CHECK_MODULES(LIBGPHOTO2, libgphoto2 >= 2.1.4)

dnl --- libexif version check

LIBEXIF_API_CHANGE=0.6.0
PKG_CHECK_MODULES(EXIF, libexif >= $LIBEXIF_API_CHANGE)
AC_SUBST(EXIF_CFLAGS)
AC_SUBST(EXIF_LIBS)

	 
PKG_CHECK_MODULES(LIBEXIF_VERSION_CHECK, libexif >= 0.6.12, EXIF_SOVERSION=12, EXIF_SOVERSION=10)
AC_SUBST(EXIF_SOVERSION)

dnl --- Set up paths

AC_ARG_WITH(turtle, [ --with-turtle=DIR                set path to source directory for turtle])
AM_CONDITIONAL(WITH_TURTLE, test "x$with_turtle" != "xno")
if test "x$with_turtle" != "xno"; then
   TURTLEDIR=$with_turtle

   AC_SUBST(TURTLEDIR)
fi

AC_ARG_WITH(gnome-screensaver,[ --with-gnome-screensaver=PREFIX  set gnome gnome-screensaver prefix])

if test "x$with_gnome_screensaver" != "x"; then
	gnome_screensaver_prefix=$with_gnome_screensaver
else
	gnome_screensaver_prefix=$prefix		   
fi

if test -d $gnome_screensaver_prefix/lib/gnome-screensaver; then
	GNOME_SCREENSAVER_SAVERDIR=$gnome_screensaver_prefix/lib/gnome-screensaver/gnome-screensaver
else 
	GNOME_SCREENSAVER_SAVERDIR=$gnome_screensaver_prefix/libexec/gnome-screensaver
fi

GNOME_SCREENSAVER_THEMESDIR=$gnome_screensaver_prefix/share/applications/screensavers

AC_SUBST(GNOME_SCREENSAVER_SAVERDIR)
AC_SUBST(GNOME_SCREENSAVER_THEMESDIR)

ICONS_DIRECTORY=${datadir}/${PACKAGE}-${VERSION}

AC_SUBST(ICONS_DIRECTORY)

dnl -- Intl

ALL_LINGUAS="ar bg ca cs da de dz el en_CA en_GB es et eu fa fi fr gl hi hu it ja lt lv mk nb nl pa pl pt pt_BR ru rw sr sr@Latn sv th vi zh_CN zh_TW"

GETTEXT_PACKAGE=f-spot
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE", [Gettext package])
AM_GLIB_GNU_GETTEXT

dnl --- Prologue

AC_SUBST(LIBJPEG)
AC_SUBST(LCMS_LIBS)
AC_SUBST(LCMS_CFLAGS)
AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)

CSC=gmcs
AC_SUBST(CSC)

expanded_libdir=`( case $prefix in NONE) prefix=$ac_default_prefix ;; *) ;; esac
		   case $exec_prefix in NONE) exec_prefix=$prefix ;; *) ;; esac
		   eval echo $libdir )`
AC_SUBST(expanded_libdir)

AC_CONFIG_FILES([src/f-spot],[chmod +x src/f-spot])

GNOME_ICON_THEME_PREFIX=`$PKG_CONFIG --variable=prefix gnome-icon-theme`
AC_SUBST(GNOME_ICON_THEME_PREFIX)

AC_OUTPUT([
Makefile
dbus-sharp/Makefile
dbus-sharp-glib/Makefile
docs/Makefile
FlickrNet/Makefile
SmugMugNet/Makefile
google-sharp/Makefile
gnome-keyring-sharp/Makefile
icons/Makefile
libeog/Makefile
libeog/cursors/Makefile
libjpegtran/Makefile
libfspot/Makefile
libgphoto2-sharp/Makefile
mono-addins/Makefile
mono-addins/Mono.Addins/Makefile
mono-addins/Mono.Addins.Gui/Makefile
mono-addins/Mono.Addins.Setup/Makefile
semweb/Makefile
tools/Makefile
po/Makefile.in
src/Defines.cs
src/AssemblyInfo.cs
src/f-spot.exe.config
src/Makefile
glitz-sharp/Makefile
glitz-sharp/src/Makefile
Tao/Makefile
Tao/Tao.OpenGl/Makefile
Tao/Tao.OpenGl.Glu/Makefile
Tao/Tao.GlPostProcess/Makefile
Tao/Tao.OpenGl.ExtensionLoader/Makefile
extensions/Makefile
extensions/DefaultExporters/Makefile
f-spot.pc
f-spot.spec
f-spot.desktop.in
f-spot-view.desktop.in
])
