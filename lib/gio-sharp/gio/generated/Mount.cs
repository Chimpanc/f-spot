// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;

#region Autogenerated code
	public interface Mount : GLib.IWrapper {

		event System.EventHandler Unmounted;
		event System.EventHandler Changed;
		event System.EventHandler PreUnmount;
		GLib.Drive Drive { 
			get;
		}
		void Remount(GLib.MountMountFlags flags, GLib.MountOperation mount_operation, GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb);
		void EjectWithOperation(GLib.MountUnmountFlags flags, GLib.MountOperation mount_operation, GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb);
		GLib.Icon Icon { 
			get;
		}
		bool IsShadowed { 
			get;
		}
		string GuessContentTypeFinish(GLib.AsyncResult result);
		bool CanEject();
		string Uuid { 
			get;
		}
		bool UnmountFinish(GLib.AsyncResult result);
		void Unshadow();
		void Eject(GLib.MountUnmountFlags flags, GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb);
		GLib.File Root { 
			get;
		}
		bool EjectFinish(GLib.AsyncResult result);
		void Unmount(GLib.MountUnmountFlags flags, GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb);
		bool UnmountWithOperationFinish(GLib.AsyncResult result);
		void GuessContentType(bool force_rescan, GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb);
		bool CanUnmount { 
			get;
		}
		GLib.Volume Volume { 
			get;
		}
		void Shadow();
		bool RemountFinish(GLib.AsyncResult result);
		string Name { 
			get;
		}
		void UnmountWithOperation(GLib.MountUnmountFlags flags, GLib.MountOperation mount_operation, GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb);
		bool EjectWithOperationFinish(GLib.AsyncResult result);
		string GuessContentTypeSync(bool force_rescan, GLib.Cancellable cancellable);
	}
#endregion
}
