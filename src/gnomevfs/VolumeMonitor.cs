// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gnome.Vfs {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public  class VolumeMonitor : GLib.Object {

		~VolumeMonitor()
		{
			Dispose();
		}

		[Obsolete]
		protected VolumeMonitor(GLib.GType gtype) : base(gtype) {}
		public VolumeMonitor(IntPtr raw) : base(raw) {}

		protected VolumeMonitor() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		delegate void VolumePreUnmountDelegate (IntPtr volume_monitor, IntPtr volume);

		static VolumePreUnmountDelegate VolumePreUnmountCallback;

		static void volumepreunmount_cb (IntPtr volume_monitor, IntPtr volume)
		{
			VolumeMonitor obj = GLib.Object.GetObject (volume_monitor, false) as VolumeMonitor;
			obj.OnVolumePreUnmount ((Gnome.Vfs.Volume) GLib.Object.GetObject(volume));
		}

		private static void OverrideVolumePreUnmount (GLib.GType gtype)
		{
			if (VolumePreUnmountCallback == null)
				VolumePreUnmountCallback = new VolumePreUnmountDelegate (volumepreunmount_cb);
			OverrideVirtualMethod (gtype, "volume_pre_unmount", VolumePreUnmountCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.Vfs.VolumeMonitor), ConnectionMethod="OverrideVolumePreUnmount")]
		protected virtual void OnVolumePreUnmount (Gnome.Vfs.Volume volume)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (volume);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
		}

		[GLib.Signal("volume_pre_unmount")]
		public event Gnome.Vfs.VolumePreUnmountHandler VolumePreUnmount {
			add {
				if (value.Method.GetCustomAttributes(typeof(GLib.ConnectBeforeAttribute), false).Length > 0) {
					if (BeforeHandlers["volume_pre_unmount"] == null)
						BeforeSignals["volume_pre_unmount"] = new Gnome.VfsSharp.voidObjectObjectSignal(this, "volume_pre_unmount", value, typeof (Gnome.Vfs.VolumePreUnmountArgs), 0);					else
						((GLib.SignalCallback) BeforeSignals ["volume_pre_unmount"]).AddDelegate (value);
					BeforeHandlers.AddHandler("volume_pre_unmount", value);
				} else {
					if (AfterHandlers["volume_pre_unmount"] == null)
						AfterSignals["volume_pre_unmount"] = new Gnome.VfsSharp.voidObjectObjectSignal(this, "volume_pre_unmount", value, typeof (Gnome.Vfs.VolumePreUnmountArgs), 1);					else
						((GLib.SignalCallback) AfterSignals ["volume_pre_unmount"]).AddDelegate (value);
					AfterHandlers.AddHandler("volume_pre_unmount", value);
				}
			}
			remove {
				System.ComponentModel.EventHandlerList event_list = AfterHandlers;
				Hashtable signals = AfterSignals;
				if (value.Method.GetCustomAttributes(typeof(GLib.ConnectBeforeAttribute), false).Length > 0) {
					event_list = BeforeHandlers;
					signals = BeforeSignals;
				}
				GLib.SignalCallback cb = signals ["volume_pre_unmount"] as GLib.SignalCallback;
				event_list.RemoveHandler("volume_pre_unmount", value);
				if (cb == null)
					return;

				cb.RemoveDelegate (value);

				if (event_list["volume_pre_unmount"] == null) {
					signals.Remove("volume_pre_unmount");
					cb.Dispose ();
				}
			}
		}

		delegate void DriveDisconnectedDelegate (IntPtr volume_monitor, IntPtr drive);

		static DriveDisconnectedDelegate DriveDisconnectedCallback;

		static void drivedisconnected_cb (IntPtr volume_monitor, IntPtr drive)
		{
			VolumeMonitor obj = GLib.Object.GetObject (volume_monitor, false) as VolumeMonitor;
			obj.OnDriveDisconnected ((Gnome.Vfs.Drive) GLib.Object.GetObject(drive));
		}

		private static void OverrideDriveDisconnected (GLib.GType gtype)
		{
			if (DriveDisconnectedCallback == null)
				DriveDisconnectedCallback = new DriveDisconnectedDelegate (drivedisconnected_cb);
			OverrideVirtualMethod (gtype, "drive_disconnected", DriveDisconnectedCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.Vfs.VolumeMonitor), ConnectionMethod="OverrideDriveDisconnected")]
		protected virtual void OnDriveDisconnected (Gnome.Vfs.Drive drive)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (drive);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
		}

		[GLib.Signal("drive_disconnected")]
		public event Gnome.Vfs.DriveDisconnectedHandler DriveDisconnected {
			add {
				if (value.Method.GetCustomAttributes(typeof(GLib.ConnectBeforeAttribute), false).Length > 0) {
					if (BeforeHandlers["drive_disconnected"] == null)
						BeforeSignals["drive_disconnected"] = new Gnome.VfsSharp.voidObjectObjectSignal(this, "drive_disconnected", value, typeof (Gnome.Vfs.DriveDisconnectedArgs), 0);					else
						((GLib.SignalCallback) BeforeSignals ["drive_disconnected"]).AddDelegate (value);
					BeforeHandlers.AddHandler("drive_disconnected", value);
				} else {
					if (AfterHandlers["drive_disconnected"] == null)
						AfterSignals["drive_disconnected"] = new Gnome.VfsSharp.voidObjectObjectSignal(this, "drive_disconnected", value, typeof (Gnome.Vfs.DriveDisconnectedArgs), 1);					else
						((GLib.SignalCallback) AfterSignals ["drive_disconnected"]).AddDelegate (value);
					AfterHandlers.AddHandler("drive_disconnected", value);
				}
			}
			remove {
				System.ComponentModel.EventHandlerList event_list = AfterHandlers;
				Hashtable signals = AfterSignals;
				if (value.Method.GetCustomAttributes(typeof(GLib.ConnectBeforeAttribute), false).Length > 0) {
					event_list = BeforeHandlers;
					signals = BeforeSignals;
				}
				GLib.SignalCallback cb = signals ["drive_disconnected"] as GLib.SignalCallback;
				event_list.RemoveHandler("drive_disconnected", value);
				if (cb == null)
					return;

				cb.RemoveDelegate (value);

				if (event_list["drive_disconnected"] == null) {
					signals.Remove("drive_disconnected");
					cb.Dispose ();
				}
			}
		}

		delegate void VolumeUnmountedDelegate (IntPtr volume_monitor, IntPtr volume);

		static VolumeUnmountedDelegate VolumeUnmountedCallback;

		static void volumeunmounted_cb (IntPtr volume_monitor, IntPtr volume)
		{
			VolumeMonitor obj = GLib.Object.GetObject (volume_monitor, false) as VolumeMonitor;
			obj.OnVolumeUnmounted ((Gnome.Vfs.Volume) GLib.Object.GetObject(volume));
		}

		private static void OverrideVolumeUnmounted (GLib.GType gtype)
		{
			if (VolumeUnmountedCallback == null)
				VolumeUnmountedCallback = new VolumeUnmountedDelegate (volumeunmounted_cb);
			OverrideVirtualMethod (gtype, "volume_unmounted", VolumeUnmountedCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.Vfs.VolumeMonitor), ConnectionMethod="OverrideVolumeUnmounted")]
		protected virtual void OnVolumeUnmounted (Gnome.Vfs.Volume volume)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (volume);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
		}

		[GLib.Signal("volume_unmounted")]
		public event Gnome.Vfs.VolumeUnmountedHandler VolumeUnmounted {
			add {
				if (value.Method.GetCustomAttributes(typeof(GLib.ConnectBeforeAttribute), false).Length > 0) {
					if (BeforeHandlers["volume_unmounted"] == null)
						BeforeSignals["volume_unmounted"] = new Gnome.VfsSharp.voidObjectObjectSignal(this, "volume_unmounted", value, typeof (Gnome.Vfs.VolumeUnmountedArgs), 0);					else
						((GLib.SignalCallback) BeforeSignals ["volume_unmounted"]).AddDelegate (value);
					BeforeHandlers.AddHandler("volume_unmounted", value);
				} else {
					if (AfterHandlers["volume_unmounted"] == null)
						AfterSignals["volume_unmounted"] = new Gnome.VfsSharp.voidObjectObjectSignal(this, "volume_unmounted", value, typeof (Gnome.Vfs.VolumeUnmountedArgs), 1);					else
						((GLib.SignalCallback) AfterSignals ["volume_unmounted"]).AddDelegate (value);
					AfterHandlers.AddHandler("volume_unmounted", value);
				}
			}
			remove {
				System.ComponentModel.EventHandlerList event_list = AfterHandlers;
				Hashtable signals = AfterSignals;
				if (value.Method.GetCustomAttributes(typeof(GLib.ConnectBeforeAttribute), false).Length > 0) {
					event_list = BeforeHandlers;
					signals = BeforeSignals;
				}
				GLib.SignalCallback cb = signals ["volume_unmounted"] as GLib.SignalCallback;
				event_list.RemoveHandler("volume_unmounted", value);
				if (cb == null)
					return;

				cb.RemoveDelegate (value);

				if (event_list["volume_unmounted"] == null) {
					signals.Remove("volume_unmounted");
					cb.Dispose ();
				}
			}
		}

		delegate void DriveConnectedDelegate (IntPtr volume_monitor, IntPtr drive);

		static DriveConnectedDelegate DriveConnectedCallback;

		static void driveconnected_cb (IntPtr volume_monitor, IntPtr drive)
		{
			VolumeMonitor obj = GLib.Object.GetObject (volume_monitor, false) as VolumeMonitor;
			obj.OnDriveConnected ((Gnome.Vfs.Drive) GLib.Object.GetObject(drive));
		}

		private static void OverrideDriveConnected (GLib.GType gtype)
		{
			if (DriveConnectedCallback == null)
				DriveConnectedCallback = new DriveConnectedDelegate (driveconnected_cb);
			OverrideVirtualMethod (gtype, "drive_connected", DriveConnectedCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.Vfs.VolumeMonitor), ConnectionMethod="OverrideDriveConnected")]
		protected virtual void OnDriveConnected (Gnome.Vfs.Drive drive)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (drive);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
		}

		[GLib.Signal("drive_connected")]
		public event Gnome.Vfs.DriveConnectedHandler DriveConnected {
			add {
				if (value.Method.GetCustomAttributes(typeof(GLib.ConnectBeforeAttribute), false).Length > 0) {
					if (BeforeHandlers["drive_connected"] == null)
						BeforeSignals["drive_connected"] = new Gnome.VfsSharp.voidObjectObjectSignal(this, "drive_connected", value, typeof (Gnome.Vfs.DriveConnectedArgs), 0);					else
						((GLib.SignalCallback) BeforeSignals ["drive_connected"]).AddDelegate (value);
					BeforeHandlers.AddHandler("drive_connected", value);
				} else {
					if (AfterHandlers["drive_connected"] == null)
						AfterSignals["drive_connected"] = new Gnome.VfsSharp.voidObjectObjectSignal(this, "drive_connected", value, typeof (Gnome.Vfs.DriveConnectedArgs), 1);					else
						((GLib.SignalCallback) AfterSignals ["drive_connected"]).AddDelegate (value);
					AfterHandlers.AddHandler("drive_connected", value);
				}
			}
			remove {
				System.ComponentModel.EventHandlerList event_list = AfterHandlers;
				Hashtable signals = AfterSignals;
				if (value.Method.GetCustomAttributes(typeof(GLib.ConnectBeforeAttribute), false).Length > 0) {
					event_list = BeforeHandlers;
					signals = BeforeSignals;
				}
				GLib.SignalCallback cb = signals ["drive_connected"] as GLib.SignalCallback;
				event_list.RemoveHandler("drive_connected", value);
				if (cb == null)
					return;

				cb.RemoveDelegate (value);

				if (event_list["drive_connected"] == null) {
					signals.Remove("drive_connected");
					cb.Dispose ();
				}
			}
		}

		delegate void VolumeMountedDelegate (IntPtr volume_monitor, IntPtr volume);

		static VolumeMountedDelegate VolumeMountedCallback;

		static void volumemounted_cb (IntPtr volume_monitor, IntPtr volume)
		{
			VolumeMonitor obj = GLib.Object.GetObject (volume_monitor, false) as VolumeMonitor;
			obj.OnVolumeMounted ((Gnome.Vfs.Volume) GLib.Object.GetObject(volume));
		}

		private static void OverrideVolumeMounted (GLib.GType gtype)
		{
			if (VolumeMountedCallback == null)
				VolumeMountedCallback = new VolumeMountedDelegate (volumemounted_cb);
			OverrideVirtualMethod (gtype, "volume_mounted", VolumeMountedCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.Vfs.VolumeMonitor), ConnectionMethod="OverrideVolumeMounted")]
		protected virtual void OnVolumeMounted (Gnome.Vfs.Volume volume)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (volume);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
		}

		[GLib.Signal("volume_mounted")]
		public event Gnome.Vfs.VolumeMountedHandler VolumeMounted {
			add {
				if (value.Method.GetCustomAttributes(typeof(GLib.ConnectBeforeAttribute), false).Length > 0) {
					if (BeforeHandlers["volume_mounted"] == null)
						BeforeSignals["volume_mounted"] = new Gnome.VfsSharp.voidObjectObjectSignal(this, "volume_mounted", value, typeof (Gnome.Vfs.VolumeMountedArgs), 0);					else
						((GLib.SignalCallback) BeforeSignals ["volume_mounted"]).AddDelegate (value);
					BeforeHandlers.AddHandler("volume_mounted", value);
				} else {
					if (AfterHandlers["volume_mounted"] == null)
						AfterSignals["volume_mounted"] = new Gnome.VfsSharp.voidObjectObjectSignal(this, "volume_mounted", value, typeof (Gnome.Vfs.VolumeMountedArgs), 1);					else
						((GLib.SignalCallback) AfterSignals ["volume_mounted"]).AddDelegate (value);
					AfterHandlers.AddHandler("volume_mounted", value);
				}
			}
			remove {
				System.ComponentModel.EventHandlerList event_list = AfterHandlers;
				Hashtable signals = AfterSignals;
				if (value.Method.GetCustomAttributes(typeof(GLib.ConnectBeforeAttribute), false).Length > 0) {
					event_list = BeforeHandlers;
					signals = BeforeSignals;
				}
				GLib.SignalCallback cb = signals ["volume_mounted"] as GLib.SignalCallback;
				event_list.RemoveHandler("volume_mounted", value);
				if (cb == null)
					return;

				cb.RemoveDelegate (value);

				if (event_list["volume_mounted"] == null) {
					signals.Remove("volume_mounted");
					cb.Dispose ();
				}
			}
		}

		[DllImport("libgnomevfs-2-0.dll")]
		static extern IntPtr gnome_vfs_volume_monitor_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gnome_vfs_volume_monitor_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgnomevfs-2-0.dll")]
		static extern IntPtr gnome_vfs_volume_monitor_get_volume_for_path(IntPtr raw, string path);

		public Gnome.Vfs.Volume GetVolumeForPath(string path) {
			IntPtr raw_ret = gnome_vfs_volume_monitor_get_volume_for_path(Handle, path);
			Gnome.Vfs.Volume ret;
			if (raw_ret == IntPtr.Zero)
				ret = null;
			else
				ret = (Gnome.Vfs.Volume) GLib.Object.GetObject(raw_ret);
			return ret;
		}

		[DllImport("libgnomevfs-2-0.dll")]
		static extern IntPtr gnome_vfs_volume_monitor_get_drive_by_id(IntPtr raw, UIntPtr id);

		public Gnome.Vfs.Drive GetDriveById(ulong id) {
			IntPtr raw_ret = gnome_vfs_volume_monitor_get_drive_by_id(Handle, new UIntPtr (id));
			Gnome.Vfs.Drive ret;
			if (raw_ret == IntPtr.Zero)
				ret = null;
			else
				ret = (Gnome.Vfs.Drive) GLib.Object.GetObject(raw_ret);
			return ret;
		}

		[DllImport("libgnomevfs-2-0.dll")]
		static extern IntPtr gnome_vfs_volume_monitor_get_volume_by_id(IntPtr raw, UIntPtr id);

		public Gnome.Vfs.Volume GetVolumeById(ulong id) {
			IntPtr raw_ret = gnome_vfs_volume_monitor_get_volume_by_id(Handle, new UIntPtr (id));
			Gnome.Vfs.Volume ret;
			if (raw_ret == IntPtr.Zero)
				ret = null;
			else
				ret = (Gnome.Vfs.Volume) GLib.Object.GetObject(raw_ret);
			return ret;
		}


		static VolumeMonitor ()
		{
			GtkSharp.GnomeVfsSharp.ObjectManager.Initialize ();
		}
#endregion
#region Customized extensions
#line 1 "VolumeMonitor.custom"
//  VolumeMonitor.custom - VolumeMonitor class customizations.
//
//  Authors:  Jeroen Zwartepoorte  <jeroen@xs4all.nl>
//
//  Copyright (c) 2004 Jeroen Zwartepoorte
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		[DllImport("libgnomevfs-2-0.dll")]
		static extern IntPtr gnome_vfs_volume_monitor_get_connected_drives(IntPtr raw);

		public Drive[] ConnectedDrives { 
			get {
				IntPtr raw_ret = gnome_vfs_volume_monitor_get_connected_drives(Handle);
				GLib.List list = new GLib.List(raw_ret);
 				Drive[] result = new Drive [list.Count];
				for (int i = 0; i < list.Count; i++)
					result [i] = list [i] as Drive;
				list.Dispose ();
				return result;
			}
		}

		[DllImport("libgnomevfs-2-0.dll")]
		static extern IntPtr gnome_vfs_volume_monitor_get_mounted_volumes(IntPtr raw);

		public Volume[] MountedVolumes { 
			get {
				IntPtr raw_ret = gnome_vfs_volume_monitor_get_mounted_volumes(Handle);
				GLib.List list = new GLib.List(raw_ret);
 				Volume[] result = new Volume [list.Count];
				for (int i = 0; i < list.Count; i++)
					result [i] = list [i] as Volume;
				list.Dispose ();
				return result;
			}
		}

		[DllImport("libgnomevfs-2-0.dll")]
		static extern IntPtr gnome_vfs_get_volume_monitor ();

		public static VolumeMonitor Get ()
		{
			IntPtr raw_ret = gnome_vfs_get_volume_monitor ();
			if (raw_ret == IntPtr.Zero)
				return null;
			else
				return (VolumeMonitor) GLib.Object.GetObject (raw_ret);
		}

#endregion
	}
}
